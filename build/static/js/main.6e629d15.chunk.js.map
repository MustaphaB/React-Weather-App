{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","pressure","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","components_Titles","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e629d15.chunk.js","sourcesContent":["import React from \"react\";\n\n\nclass Titles extends  React.Component{\n    render(){\n        return(\n            <div>\n                <h1 className=\"title-container__title\">Weather Finder</h1>\n                <p className=\"title-container__subtitle\"> Find out temperature, conditions, and more...</p>               \n            </div>\n\n        );\n\n    }\n};\n\nexport default Titles;\n\n\n\n\n","import React from \"react\";\n\n\n\nclass Form extends React.Component{\n    render(){\n        return(\n            <form onSubmit={this.props.getWeather}>\n                <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n                <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\n                <button>Get Weather</button>\n            </form>\n\n        );\n    };\n\n};\n\n\nexport default Form;","import React from \"react\";\n\n\nclass Weather extends React.Component{\n    render(){\n        return(\n            <div className=\"weather__info\">\n                {\n                    this.props.city && this.props.country && <p className=\"weather__key\">Location: \n                    <span className=\"weather__value\">  {this.props.city}, {this.props.country}</span>\n                    </p> \n                }\n                {\n                    this.props.temperature && <p className=\"weather__key\">Temperature: \n                    <span className=\"weather__value\" >  {this.props.temperature}</span>\n                    </p>\n                }\n                {\n                    this.props.pressure && <p className=\"weather__key\">Pressure: \n                    <span className=\"weather__value\" > {this.props.pressure}</span>\n                    </p>\n\n                }\n\n                {\n                    this.props.humidity && <p className=\"weather__key\">Humidity: \n                    <span className=\"weather__value\" >  {this.props.humidity}</span>\n                    </p>\n                }\n                {\n                    this.props.description && <p className=\"weather__key\" >Conditions: \n                    <span className=\"weather__value\">  {this.props.description}</span>\n                    </p>\n                }\n                {\n                    this.props.error && <p className=\"weather__error\">  {this.props.error}</p>\n                }\n            </div>\n\n        );\n    };\n\n};\n\nexport default Weather;","import React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"369042b36225ba7dafd6191848183624\";\n\n\nclass App extends React.Component {\n    state = {\n        temperature: undefined,\n        city:undefined,\n        pressure: undefined,\n        country:undefined,\n        humidity: undefined,\n        description: undefined,\n        error: undefined\n        // wind deg\n        // wind speed\n        //pressure\n        // Max or min temperature \n    \n    }\n\n    getWeather = async (e) =>{\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`);\n        const data = await api_call.json();\n        if(city && country){\n            console.log(data);\n            this.setState({\n                temperature: data.main.temp,\n                pressure:data.main.pressure,\n                city: data.name,\n                country: data.sys.country,\n                humidity: data.main.humidity,\n                description: data.weather[0].description,\n                error: \"\"\n    \n            });\n        }else{\n            this.setState({\n                temperature: undefined,\n                pressure: undefined,\n                city: undefined,\n                country: undefined,\n                humidity: undefined,\n                description: undefined,\n                error: \"Please enter the value\"\n    \n            });\n\n        }\n\n    }\n    render(){\n        return(\n            <div>\n                <div className=\"wrapper\">\n                    <div className=\"main\">\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className=\"col-xs-5 title-container\">\n                                    <Titles />\n                                </div>\n                                <div className=\"col-xs-7 form-container\">\n                                    <Form getWeather={this.getWeather}/>\n                                    <Weather \n                                        temperature = {this.state.temperature}\n                                        pressure = {this.state.pressure}\n                                        city = {this.state.city}\n                                        country = {this.state.country}\n                                        humidity = {this.state.humidity}\n                                        description = {this.state.description}\n                                        error={this.state.error}\n                                     />  \n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}